name: CI/CD Pipeline for Open Forum Server

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'server/**'

# Environment variables available to all jobs
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # JOB 1: Test, Build, and Push Docker Image
  build-and-push:
    name: Test, Build, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci
        working-directory: ./server

      - name: Run automated tests
        run: npm run test
        working-directory: ./server

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 2: Deploy to Production Server
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DOCKER_SERVER_SSH_KEY }}

      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DOCKER_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy application via SSH
        run: |
          ssh ${{ secrets.DOCKER_SERVER_USERNAME }}@${{ secrets.DOCKER_SERVER_IP }} << 'EOF'
            # Navigate to the project directory
            cd ~/open-forum

            # Pull the latest changes from the repository
            git pull

            # Navigate into the server directory where docker-compose.yml is located
            cd server

            # Create necessary directories if they do not exist
            mkdir -p secrets uploads backups logs

            # Create production environment files from GitHub Secrets
            echo "${{ secrets.POSTGRES_PASSWORD }}" > secrets/postgres_password.txt
            
            # --- Create the complete .env.production file ---
            cat <<EOT > .env.production
            # Application Configuration
            NODE_ENV=production
            PORT=3000
            API_PREFIX=api/v1

            # CORS Configuration
            CORS_ORIGIN=https://api.open-forum.social
            CLIENT_URL=https://open-forum.social
            CORS_CREDENTIALS=true

            # Database Configuration
            DB_HOST=postgres
            DB_PORT=5432
            DB_USER=postgres
            DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_NAME=open_forum

            # JWT Configuration
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            ACCESS_TOKEN_EXPIRES=15m
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            REFRESH_TOKEN_EXPIRES=7d

            # Logging Configuration
            LOG_LEVEL=info
            LOG_CONSOLE=false
            LOG_FILE=true
            LOG_MAX_SIZE=25m
            LOG_MAX_FILES=30d
            LOG_ERROR_MAX_FILES=90d

            # Web Push Notifications (VAPID)
            VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}
            VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
            VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }}

            # Google OAuth
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CALLBACK_URL=https://api.open-forum.social/api/v1/auth/google/callback

            # Admin User Configuration
            ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            EOT

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Pull the latest services defined in docker-compose.yml
            docker-compose pull

            # Start the application stack
            docker-compose up -d --force-recreate --remove-orphans

            # Run database migrations
            docker-compose --profile migrate up

            # Clean up old Docker images to save space
            docker image prune -af
          EOF