name: CI/CD Pipeline for Open Forum Server

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'server/**'

  # Allow manual triggering of the workflow
  workflow_dispatch:

# Environment variables available to all jobs
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # JOB 1: Test, Build, and Push Docker Image
  build-and-push:
    name: Test, Build, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci
        working-directory: ./server

      - name: Run automated tests
        run: npm run test
        working-directory: ./server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 2: Deploy to Production Server
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DOCKER_SERVER_SSH_KEY }}

      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DOCKER_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy application via SSH
        run: |
          ssh ${{ secrets.DOCKER_SERVER_USERNAME }}@${{ secrets.DOCKER_SERVER_IP }} << 'EOF'

          # Navigate to the project directory
          cd ~/open-forum

          # Pull the latest changes from the main branch
          git fetch origin
          git reset --hard origin/main

          # Navigate into the server directory where dockercompose.yml is located
          cd server

          # Create necessary directories if they do not exist
          mkdir -p secrets uploads backups logs

          # Create secrets file for PostgreSQL password
          echo "${{ secrets.POSTGRES_PASSWORD }}" > secrets/postgres_password.txt

          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Pull the latest Docker images
          docker compose pull

          # Start the application stack
          docker compose up -d --force-recreate --remove-orphans

          # Wait for services to be healthy
          sleep 30

          # Run database migrations
          docker compose run --rm migrate

          # Clean up old Docker images to save space
          docker image prune -af
          EOF
